"""
üìò generate_config_doc.py

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–æ–≤ Pydantic `BaseSettings`.

üì¶ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
- –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã (–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ BaseSettings) –≤ `app/core/config.py`.
- –§–æ—Ä–º–∏—Ä—É–µ—Ç Markdown-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (`descriptions/config_settings.md`) —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∏—Ö —Ç–∏–ø–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω `.env.example` —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ placeholder'–∞–º–∏ (your_...) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–∫.

üß† –ó–∞—á–µ–º –Ω—É–∂–µ–Ω:
- –£–ø—Ä–æ—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É .env –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫.
- –£—Å–∫–æ—Ä—è–µ—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
- –ú–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é CI, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Swagger-–¥–æ–∫–æ–≤ –∏ –ø—Ä.

üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
```bash
python scripts/generate_config_doc.py
```

üìÇ –§–∞–π–ª—ã:
- Markdown: `descriptions/config_settings.md`
- –ü—Ä–∏–º–µ—Ä .env: `.env.example`

üìå P.S. –≠—Ç–æ –Ω–µ –º–∞–≥–∏—è. –≠—Ç–æ –∑–∞–±–æ—Ç–∞.
"""

import importlib.util
import sys
from inspect import getmembers, isclass
from pathlib import Path
from pydantic_core import PydanticUndefined

# –ü—É—Ç–∏
BASE_PATH = Path(__file__).resolve().parent.parent
CONFIG_PATH = BASE_PATH / "app" / "core" / "config.py"
OUTPUT_DIR = BASE_PATH / "descriptions"
OUTPUT_FILE_CONFIG = OUTPUT_DIR / "config_settings.md"
OUTPUT_FILE_ENV = BASE_PATH / ".env.example"
OUTPUT_DIR.mkdir(exist_ok=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ config.py
spec = importlib.util.spec_from_file_location("config", CONFIG_PATH)
config = importlib.util.module_from_spec(spec)
sys.modules["config"] = config
spec.loader.exec_module(config)

# Markdown-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
def generate_config_doc() -> str:
    output = ["# üì¶ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"]

    for name, cls in getmembers(config):
        if isclass(cls) and issubclass(cls, config.Settings) and cls is not config.Settings:
            section = [f"## üîπ {name}"]
            try:
                for field, field_info in cls.model_fields.items():
                    field_type = getattr(field_info.annotation, '__name__', str(field_info.annotation))
                    if field_info.default is PydanticUndefined:
                        default = "(required)"
                    else:
                        default = field_info.default
                    section.append(f"- **{field}**: `{field_type}` = `{default}`")
            except Exception as e:
                section.append(f"- ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            output.append("\n".join(section) + "\n")

    return "\n".join(output)

# .env.example
def generate_env_example() -> str:
    output = ["# üîß .env.example ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"]

    for name, cls in getmembers(config):
        if isclass(cls) and issubclass(cls, config.Settings) and cls is not config.Settings:
            output.append(f"# ‚ñ∂Ô∏è {name}")
            try:
                for field, field_info in cls.model_fields.items():
                    env_name = field.upper()
                    if field_info.default is PydanticUndefined:
                        placeholder = f"your_{field.lower()}"
                    else:
                        placeholder = field_info.default
                    output.append(f"{env_name}={placeholder}")
            except Exception as e:
                output.append(f"# ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            output.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏

    return "\n".join(output)

# –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
intro_md = f"""# üìò –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º `generate_config_doc.py`.

## üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
- –ö–æ–Ω—Ñ–∏–≥: `app/core/config.py`
- .env: `{BASE_PATH / ".env.example"}`
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: `descriptions/config_settings.md`

## üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ñ–∏–≥–∞–º–∏

–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –ª–µ–Ω–∏–≤—ã–µ –æ–±—ë—Ä—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:

```python
from app.core.config import get_db_settings

db_url = get_db_settings().async_tapi_pstgr_url
```

## üõ† –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫:
"""

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
OUTPUT_FILE_CONFIG.write_text(intro_md + "\n" + generate_config_doc(), encoding="utf-8")
OUTPUT_FILE_ENV.write_text(generate_env_example(), encoding="utf-8")
print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {OUTPUT_FILE_CONFIG}")
print(f"‚úÖ –ü—Ä–∏–º–µ—Ä .env: {OUTPUT_FILE_ENV}")
