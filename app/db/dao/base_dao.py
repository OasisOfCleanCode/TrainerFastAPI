# app/db/dao/base_dao.py

"""
‚ö†Ô∏è –ü–æ—á–µ–º—É –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —ç—Ç–æ—Ç DAO –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ —Ä–∞–¥–∏ "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏":

–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ –∑–∞–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ª—É—á—à–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç ¬´–º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏¬ª.
–û–¥–Ω–∞–∫–æ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –Ω–µ –¥–∞—Å—Ç –∑–∞–º–µ—Ç–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞. –í–æ—Ç –ø–æ—á–µ–º—É:

1. üí° –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π ‚Äî —ç—Ç–æ –Ω–µ –∫–æ–¥ Python, –∞ –°–ê–ú –ó–ê–ü–†–û–° –≤ –ë–î (I/O, —Å–µ—Ç–∏, –¥–∏—Å–∫ –∏ —Ç.–¥.).
   –î–∞–∂–µ –∏–¥–µ–∞–ª—å–Ω–æ ¬´–ª—ë–≥–∫–∞—è¬ª —Ñ—É–Ω–∫—Ü–∏—è –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç PostgreSQL –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –¥–≤–∏–∂–∫–∞.

2. üì¶ –ö–ª–∞—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á—É—Ç—å —Ç—è–∂–µ–ª–µ–µ (–≤ –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ self/class), –Ω–æ —ç—Ç–æ **—Å–æ—Ç—ã–µ –¥–æ–ª–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã**.
   –ï—Å–ª–∏ –≤—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç–µ DAO –º–∏–ª–ª–∏–æ–Ω—ã —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É ‚Äî –≤—ã —ç—Ç–æ–≥–æ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç–µ.

3. üîÅ DAO-–∫–ª–∞—Å—Å –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º: –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å.
   –í —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ –ø—Ä–∏–¥—ë—Ç—Å—è –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–≥–æ –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ–π –ª–æ–≥–∏–∫–∏ ‚Äî —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å.

4. üõ† –ù–∞—Å—Ç–æ—è—â–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ–ª–∞–µ—Ç—Å—è –Ω–µ –∑–¥–µ—Å—å:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `EXPLAIN ANALYZE` –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–π—Ç–µ –ø–æ–ª—è –≤ –ë–î.
   - –°–æ–∫—Ä–∞—â–∞–π—Ç–µ —á–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (batching, prefetching).
   - –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (Redis, –≤ –ø–∞–º—è—Ç–∏, selectinload).
   - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –ø—É–ª–æ–≤.

5. ‚öôÔ∏è –ï—Å–ª–∏ –≤—ã —É–ø—ë—Ä–ª–∏—Å—å –≤ I/O ‚Äî —Å–ø–∞—Å—ë—Ç –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∞ –∂–µ–ª–µ–∑–æ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
   - SSD/NVMe-–¥–∏—Å–∫–∏ (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º)
   - –ë–æ–ª—å—à–µ RAM (–º–µ–Ω—å—à–µ —Å–≤–æ–ø–∞)
   - –ë—ã—Å—Ç—Ä–∞—è —Å–µ—Ç—å (–¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ë–î)
   - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (tracing, –º–µ—Ç—Ä–∏–∫–∏).

–í—ã–≤–æ–¥: –∫–ª–∞—Å—Å—ã –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî —ç—Ç–æ **–Ω–µ —Ç–æ—Ä–º–æ–∑**, –∞ **—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**.
"""

from typing import Generic, TypeVar, List, Any

from sqlalchemy import (
    select,
    update as sqlalchemy_update,
    delete as sqlalchemy_delete,
    func,
)
from sqlalchemy.exc import SQLAlchemyError

from pydantic import BaseModel

from app.core.exceptions import ValidationException
from app.db.models import User
from app.utils.logger import logger

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from sqlalchemy.ext.asyncio import AsyncSession
    from app.db.models.base_sql import IntIdSQL

SQL = TypeVar("SQL", bound=IntIdSQL)


class BaseDAO(Generic[SQL]):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å DAO(–û–±—ä–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º).
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–æ–¥–µ–ª—å SQLAlchemy –∏ –¥–∞–Ω–Ω—ã–µ –æ–±–µ—Ä–Ω—É—Ç—ã–µ –≤ Pydantic.
    """

    model: type[SQL]
    name_object_model: str

    def __init_subclass__(cls, **kwargs):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª–∞—Å—Å–∞.

        - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ (`name_object_model`) –∫–∞–∫ –∏–º—è –∫–ª–∞—Å—Å–∞ –±–µ–∑ "DAO" –≤ –∫–æ–Ω—Ü–µ.
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞.
        - –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –æ—Ç `BaseDAO`.
        """
        super().__init_subclass__(**kwargs)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–æ–π –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ BaseDAO, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å SQLAlchemy
        if issubclass(cls, BaseDAO) and cls is not BaseDAO:
            cls.name_object_model = cls.__name__[:-3].lower()
            logger.info(f"{cls.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    @classmethod
    async def find_one_or_none_by_id(cls, data_id: int, db: AsyncSession) -> IntIdSQL:
        """
        –ù–∞–π—Ç–∏ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ –µ—ë ID.

        - –§–æ—Ä–º–∏—Ä—É–µ—Ç SELECT-–∑–∞–ø—Ä–æ—Å –ø–æ –ø–æ–ª—é `id`.
        - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç SQLAlchemy –∏–ª–∏ None.
        - –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

        :param data_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :return: –û–¥–∏–Ω –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ None.
        """
        logger.info(f"–ü–æ–∏—Å–∫ {cls.model.__name__} —Å ID: {data_id}")
        try:
            query = select(cls.model).filter_by(id=data_id)
            result = await db.execute(query)
            record = result.scalar_one_or_none()
            if record:
                logger.info(f"–ó–∞–ø–∏—Å—å —Å ID {data_id} –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                logger.info(f"–ó–∞–ø–∏—Å—å —Å ID {data_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return record
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–∏ —Å ID {data_id}: {e}")
            raise

    @classmethod
    async def find_one_or_none(cls, db: AsyncSession, filters: BaseModel):
        """
        –ù–∞–π—Ç–∏ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.

        - –§–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Pydantic-–º–æ–¥–µ–ª—å.
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `filter_by(**dict)` –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞.
        - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏–ª–∏ None.

        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :param filters: Pydantic-–º–æ–¥–µ–ª—å —Å –ø–æ–ª—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
        :return: –û–¥–∏–Ω –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ None.
        """
        logger.info("# –ù–∞–π—Ç–∏ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º. (BaseDAO.find_one_or_none)")
        filter_dict = filters.model_dump()
        logger.info(
            f"–ü–æ–∏—Å–∫ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ {cls.model.__name__} –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: {filter_dict}"
        )
        try:
            query = select(cls.model).filter_by(**filter_dict)
            result = await db.execute(query)
            record = result.scalar_one_or_none()
            if record:
                logger.info(f"–ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: {filter_dict}")
            else:
                logger.info(f"–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: {filter_dict}")
            return record
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º {filter_dict}: {e}")
            raise

    @classmethod
    async def find_all(cls, db: AsyncSession, filters: BaseModel | None):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º.

        - –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –≤–µ—Ä–Ω—ë—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏.
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `filter_by()`.

        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :param filters: –ú–æ–¥–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–ª–∏ None.
        :return: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
        """
        if filters:
            filter_dict = filters.model_dump(exclude_unset=True)
        else:
            filter_dict = {}
        logger.info(
            f"–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π {cls.model.__name__} –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º: {filter_dict}"
        )
        try:
            query = select(cls.model).filter_by(**filter_dict)
            result = await db.execute(query)
            records = result.scalars().all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π.")
            return records
        except SQLAlchemyError as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º {filter_dict}: {e}"
            )
            raise

    @classmethod
    async def add(cls, db: AsyncSession, values: BaseModel):
        """
        –î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É.

        - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç Pydantic-–º–æ–¥–µ–ª—å, –º–∞–ø–∏—Ç –µ—ë –≤ SQL-–º–æ–¥–µ–ª—å.
        - –í—ã–ø–æ–ª–Ω—è–µ—Ç `flush()` (–Ω–µ `commit()`).
        - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.

        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :param values: Pydantic-–º–æ–¥–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏.
        :return: –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç SQLAlchemy.
        """
        values_dict = values.model_dump(exclude_unset=True)
        logger.info(
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {cls.model.__name__} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {values_dict}"
        )
        new_instance = cls.model(**values_dict)
        db.add(new_instance)
        try:
            await db.flush()
            logger.info(f"–ó–∞–ø–∏—Å—å {cls.model.__name__} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        except SQLAlchemyError as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            raise e
        return new_instance

    @classmethod
    async def add_many(cls, db: AsyncSession, instances: List[BaseModel]):
        """
        –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å—Ä–∞–∑—É.

        - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Pydantic-–º–æ–¥–µ–ª–µ–π.
        - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞–∂–¥—É—é –≤ SQL-–º–æ–¥–µ–ª—å.
        - –í—ã–ø–æ–ª–Ω—è–µ—Ç `flush()`.

        :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        :param instances: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.
        :return: –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö SQL-–º–æ–¥–µ–ª–µ–π.
        """
        values_list = [item.model_dump(exclude_unset=True) for item in instances]
        logger.info(
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π {cls.model.__name__}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(values_list)}"
        )
        new_instances = [cls.model(**values) for values in values_list]
        db.add_all(new_instances)
        try:
            await db.flush()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_instances)} –∑–∞–ø–∏—Å–µ–π.")
        except SQLAlchemyError as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            raise e
        return new_instances

    @classmethod
    async def update(cls, db: AsyncSession, filters: BaseModel, values: BaseModel):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É.

        - –°—Ç—Ä–æ–∏—Ç –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ `update(...)`.
        - –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å.
        - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.

        :param db: –°–µ—Å—Å–∏—è.
        :param filters: –ú–æ–¥–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
        :param values: –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        """
        filter_dict = filters.model_dump(exclude_unset=True)
        values_dict = values.model_dump(exclude_unset=True)
        logger.info(
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π {cls.model.__name__} –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {filter_dict} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {values_dict}"
        )
        query = (
            sqlalchemy_update(cls.model)
            .where(*[getattr(cls.model, k) == v for k, v in filter_dict.items()])
            .values(**values_dict)
            .execution_options(synchronize_session="fetch")
        )
        try:
            result = await db.execute(query)
            await db.flush()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {result.rowcount} –∑–∞–ø–∏—Å–µ–π.")
            return result.rowcount
        except SQLAlchemyError as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
            raise e

    @classmethod
    async def delete(cls, db: AsyncSession, filters: BaseModel):
        """
        –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É.

        - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä.
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `delete(...)`.

        :param db: –°–µ—Å—Å–∏—è.
        :param filters: –ú–æ–¥–µ–ª—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è.
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        """
        filter_dict = filters.model_dump(exclude_unset=True)
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π {cls.model.__name__} –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {filter_dict}")
        if not filter_dict:
            logger.error("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            raise ValidationException("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

        query = sqlalchemy_delete(cls.model).filter_by(**filter_dict)
        try:
            result = await db.execute(query)
            await db.flush()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {result.rowcount} –∑–∞–ø–∏—Å–µ–π.")
            return result.rowcount
        except SQLAlchemyError as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
            raise e

    @classmethod
    async def count(cls, db: AsyncSession, filters: BaseModel):
        """
        –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º.

        - –í—ã–ø–æ–ª–Ω—è–µ—Ç `SELECT COUNT(...)`.
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É.

        :param db: –°–µ—Å—Å–∏—è.
        :param filters: –ú–æ–¥–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫.
        """
        filter_dict = filters.model_dump(exclude_unset=True)
        logger.info(
            f"–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π {cls.model.__name__} –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {filter_dict}"
        )
        try:
            query = select(func.count(cls.model.id)).filter_by(**filter_dict)
            result = await db.execute(query)
            count = result.scalar()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π.")
            return count
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π: {e}")
            raise

    @classmethod
    async def paginate(
        cls,
        db: AsyncSession,
        page: int = 1,
        page_size: int = 10,
        filters: BaseModel = None,
    ):
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `.offset().limit()`.

        :param db: –°–µ—Å—Å–∏—è.
        :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1).
        :param page_size: –ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        :param filters: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.
        :return: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π.
        """
        filter_dict = filters.model_dump(exclude_unset=True) if filters else {}
        logger.info(
            f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π {cls.model.__name__} –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {filter_dict}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}, —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_size}"
        )
        try:
            query = select(cls.model).filter_by(**filter_dict)
            result = await db.execute(
                query.offset((page - 1) * page_size).limit(page_size)
            )
            records = result.scalars().all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")
            return records
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
            raise

    @classmethod
    async def find_by_ids(cls, db: AsyncSession, ids: List[int]) -> List[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ —Å–ø–∏—Å–∫—É ID.

        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `IN` –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.
        - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö id –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫.

        :param db: –°–µ—Å—Å–∏—è.
        :param ids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.
        :return: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤.
        """
        logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π {cls.model.__name__} –ø–æ —Å–ø–∏—Å–∫—É ID: {ids}")
        try:
            query = select(cls.model).filter(cls.model.id.in_(ids))
            result = await db.execute(query)
            records = result.scalars().all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Å–ø–∏—Å–∫—É ID.")
            return records
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π –ø–æ —Å–ø–∏—Å–∫—É ID: {e}")
            raise

    @classmethod
    async def upsert(
        cls, db: AsyncSession, unique_fields: List[str], values: BaseModel
    ):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.

        - –ü–æ–∏—Å–∫ –≤–µ–¥—ë—Ç—Å—è –ø–æ `unique_fields`.
        - –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.
        - –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è.

        :param db: –°–µ—Å—Å–∏—è.
        :param unique_fields: –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∏—â–µ–º.
        :param values: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        :return: –ù–æ–≤—ã–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.
        """
        values_dict = values.model_dump(exclude_unset=True)
        filter_dict = {
            field: values_dict[field] for field in unique_fields if field in values_dict
        }

        logger.info(f"Upsert –¥–ª—è {cls.model.__name__}")
        try:
            existing = await cls.find_one_or_none(
                db, BaseModel.model_construct(**filter_dict)
            )
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                for key, value in values_dict.items():
                    setattr(existing, key, value)
                await db.flush()
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å {cls.model.__name__}")
                return existing
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                new_instance = cls.model(**values_dict)
                db.add(new_instance)
                await db.flush()
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å {cls.model.__name__}")
                return new_instance
        except SQLAlchemyError as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ upsert: {e}")
            raise

    @classmethod
    async def bulk_update(cls, db: AsyncSession, records: List[BaseModel]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π.

        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤.
        - –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ `id`.
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `update(...).filter_by(id=...)`.

        :param db: –°–µ—Å—Å–∏—è.
        :param records: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å id –∏ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏.
        :return: –ö–æ–ª-–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        """
        logger.info(f"–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π {cls.model.__name__}")
        try:
            updated_count = 0
            for record in records:
                record_dict = record.model_dump(exclude_unset=True)
                if "id" not in record_dict:
                    continue

                update_data = {k: v for k, v in record_dict.items() if k != "id"}
                stmt = (
                    sqlalchemy_update(cls.model)
                    .filter_by(id=record_dict["id"])
                    .values(**update_data)
                )
                result = await db.execute(stmt)
                updated_count += result.rowcount

            await db.flush()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π")
            return updated_count
        except SQLAlchemyError as e:
            await db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            raise
