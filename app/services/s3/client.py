"""
‚ö†Ô∏è –ü–æ—á–µ–º—É –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —ç—Ç–æ—Ç S3-–∫–ª–∏–µ–Ω—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Ä–∞–¥–∏ "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏":

–ò–Ω–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏–¥–µ—è —É–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å—ã –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π ‚Äî —è–∫–æ–±—ã —Ä–∞–¥–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–ª–∏ "–ª—ë–≥–∫–æ—Å—Ç–∏".
–û–¥–Ω–∞–∫–æ –≤ —Å–ª—É—á–∞–µ `S3Client` —ç—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ. –ü–æ—á–µ–º—É?

1. üê¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ ‚Äî —ç—Ç–æ –Ω–µ Python, –∞ I/O:
   - –ó–∞–≥—Ä—É–∑–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ S3 –∏–ª–∏ —Å –¥–∏—Å–∫–∞ = —Å–µ—Ç–µ–≤–æ–π –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—ã–π –≤–≤–æ–¥-–≤—ã–≤–æ–¥.
   - –î–∞–∂–µ –∏–¥–µ–∞–ª—å–Ω–æ "–ø–ª–æ—Å–∫–∞—è" —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å, –ø–æ–∫–∞ MinIO –∏–ª–∏ –¥–∏—Å–∫ –∑–∞–≤–µ—Ä—à–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—é.

2. üß† –ö–ª–∞—Å—Å `S3Client` –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:
   - –û–¥–∏–Ω —Ä–∞–∑ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–ª–∏–µ–Ω—Ç MinIO (`Minio(...)`) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.
   - –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø–æ–¥–º–µ–Ω–∏—Ç—å `use_s3=True/False`, –ø–µ—Ä–µ–∫–ª—é—á–∞—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ –ª–µ—Ç—É.
   - –í —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–¥—ë—Ç—Å—è –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫—É—á—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é.

3. üîÅ –£–¥–æ–±–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞:
   - –ú–µ—Ç–æ–¥—ã `convert_to_webp`, `resize_and_crop`, `upload_and_prepare_images` –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.
   - –ï—Å–ª–∏ –≤—Å—ë –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–¥—ë—Ç—Å—è –ª–∏–±–æ –≥–æ—Ä–æ–¥–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –ª–∏–±–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –∏ —Ñ–ª–∞–≥.

4. üõ† –†–µ–∞–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ‚Äî –Ω–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–¥–∞:
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –∏ —Å–∂–∞—Ç–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
   - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ MinIO (—á–∏—Å–ª–æ –ø–æ—Ç–æ–∫–æ–≤, —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤).
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CDN –∏–ª–∏ reverse proxy (Nginx) –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ —á–∞—Å—Ç–æ —á–∏—Ç–∞—é—Ç—Å—è.
   - –ï—Å–ª–∏ bottleneck –≤ Pillow ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ libvips –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ preview-—Ñ–∞–π–ª–æ–≤.

5. ‚öôÔ∏è –ï—Å–ª–∏ —É–ø–∏—Ä–∞–µ–º—Å—è –≤ I/O ‚Äî –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –∂–µ–ª–µ–∑–æ:
   - –ë—ã—Å—Ç—Ä—ã–π –¥–∏—Å–∫ / —Å–µ—Ç—å / –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.
   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π MinIO —Å –≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π storage backend.
   - –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.

üìå –í—ã–≤–æ–¥: `S3Client` –≤ –û–û–ü ‚Äî —ç—Ç–æ **–Ω–µ —Ç–æ—Ä–º–æ–∑**, –∞ **–≥—Ä–∞–º–æ—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —É–¥–æ–±–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π –ª–æ–≥–∏–∫–∏**.
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —É—Å–ª–æ–∂–Ω–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.
"""

import asyncio
import errno
import mimetypes
import os
from datetime import datetime
from io import BytesIO
from uuid import UUID

from PIL import Image, UnidentifiedImageError
from minio import Minio
from minio.error import S3Error
from app.core.config import get_s3_storage_config
from app.utils.logger import logger
from fastapi.responses import StreamingResponse
from fastapi import HTTPException


class S3Client:
    """
    üß∞ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å S3 (MinIO) –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.

    üìå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π;
    - –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π;
    - –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤;

    üîÅ –í—ã–±–æ—Ä –º–µ–∂–¥—É S3 –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è —Ñ–ª–∞–≥–æ–º `use_s3`.
    """

    def __init__(self, use_s3: bool = True):
        """
        üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞: —Å–æ–∑–¥–∞—ë—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä MinIO –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º.
        """
        self.use_s3 = use_s3
        endpoint = f"{get_s3_storage_config().TAPI_MINIO_HOST}:{get_s3_storage_config().TAPI_MINIO_PORT}"
        self.client = Minio(
            endpoint,
            access_key=get_s3_storage_config().TAPI_MINIO_USER,
            secret_key=get_s3_storage_config().TAPI_MINIO_PASS,
            secure=False,
        )
        self.bucket_name = get_s3_storage_config().TAPI_MINIO_USER_BASKET_NAME
        logger.info(
            f"S3Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å endpoint: {endpoint}, bucket: {self.bucket_name}, use_s3: {self.use_s3}"
        )

    @staticmethod
    async def validate_image_file(file_bytes: bytes, filename: str) -> bool:
        """
        üßê –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë).
        """
        size_mb = len(file_bytes) / (1024 * 1024)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ {filename}, —Ä–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
        if size_mb > 10:
            logger.warning(f"–§–∞–π–ª {filename} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 10 –ú–ë")
            return False
        try:
            await asyncio.to_thread(lambda: Image.open(BytesIO(file_bytes)).verify())
            logger.info(f"–§–∞–π–ª {filename} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return True
        except UnidentifiedImageError:
            logger.warning(f"–§–∞–π–ª {filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
            return False

    @staticmethod
    async def convert_to_webp(file_bytes: bytes, quality: int = 80) -> bytes:
        """
        üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç WebP —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º.
        """
        logger.info("–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP")
        try:

            def _convert():
                with Image.open(BytesIO(file_bytes)) as img:
                    img = img.convert("RGB")
                    output = BytesIO()
                    img.save(output, format="WEBP", quality=quality)
                    return output.getvalue()

            webp_bytes = await asyncio.to_thread(_convert)
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä: {len(webp_bytes)/1024:.2f} KB")
            return webp_bytes
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WebP")

    @staticmethod
    async def resize_and_crop(image: Image.Image, min_side=64) -> Image.Image:
        """
        ‚úÇÔ∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.
        """
        logger.info("–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        try:
            width, height = image.size
            scale = min_side / min(width, height)
            new_size = (int(width * scale), int(height * scale))
            resized_image = await asyncio.to_thread(
                lambda: image.resize(new_size, Image.Resampling.LANCZOS)
            )
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ: {new_size}")
            return resized_image
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏: {e}")
            raise HTTPException(
                status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            )

    async def upload_and_prepare_images(
        self, photo_id: str, orig_file_bytes: bytes, date: datetime
    ) -> tuple[str, str]:
        """
        üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
        - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞;
        - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é;
        - –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ.
        """
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {photo_id}")
        try:
            orig_webp_bytes = await self.convert_to_webp(orig_file_bytes)
            with Image.open(BytesIO(orig_file_bytes)) as img:
                img = img.convert("RGB")
                preview_img = await self.resize_and_crop(img)
                output = BytesIO()
                await asyncio.to_thread(preview_img.save, output, "WEBP", quality=80)
                preview_webp_bytes = output.getvalue()
                logger.info("–ü—Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")

            if self.use_s3:
                return await self.upload_photo_and_preview(
                    photo_id, orig_webp_bytes, preview_webp_bytes, date
                )
            else:
                return await self.local_upload_photo_and_preview(
                    photo_id, orig_webp_bytes, preview_webp_bytes, date
                )
        except HTTPException as e:
            logger.error(f"HTTPException: {e.detail}")
            raise e
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            raise HTTPException(
                status_code=500, detail="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –∑–∞–≥—Ä—É–∑–∫–µ"
            )

    @classmethod
    async def upload_photo_and_preview(
        cls,
        photo_id: str,
        orig_file_bytes: bytes,
        preview_file_bytes: bytes,
        date: datetime,
    ) -> tuple[str, str]:
        """
        ‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–≤—å—é –≤ S3-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
        """
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ S3")
        date_str = date.strftime("%Y-%m-%d")
        orig_key = f"{date_str}/{photo_id}/orig.webp"
        preview_key = f"{date_str}/{photo_id}/preview.webp"

        try:
            await asyncio.to_thread(
                cls().client.put_object,
                cls().bucket_name,
                orig_key,
                BytesIO(orig_file_bytes),
                len(orig_file_bytes),
                "image/webp",
            )
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {orig_key} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3")
        except S3Error as e:
            logger.error(f"S3Error –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {orig_key}: {e}")
            raise HTTPException(status_code=500, detail=f"S3 –æ—à–∏–±–∫–∞: {e.code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {orig_key}: {e}")
            raise HTTPException(
                status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ S3"
            )

        try:
            await asyncio.to_thread(
                cls().client.put_object,
                cls().bucket_name,
                preview_key,
                BytesIO(preview_file_bytes),
                len(preview_file_bytes),
                "image/webp",
            )
            logger.info(f"–ü—Ä–µ–≤—å—é {preview_key} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3")
        except S3Error as e:
            logger.error(f"S3Error –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é {preview_key}: {e}")
            raise HTTPException(status_code=500, detail=f"S3 –æ—à–∏–±–∫–∞: {e.code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é {preview_key}: {e}")
            raise HTTPException(
                status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é –≤ S3"
            )

        return orig_key, preview_key

    @classmethod
    async def local_upload_photo_and_preview(
        cls,
        photo_id: str,
        orig_file_bytes: bytes,
        preview_file_bytes: bytes,
        date: datetime,
    ) -> tuple[str, str]:
        """
        üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø—Ä–µ–≤—å—é –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.
        """
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ")
        date_str = date.strftime("%Y-%m-%d")
        orig_key = f"{date_str}/{photo_id}/orig.webp"
        preview_key = f"{date_str}/{photo_id}/preview.webp"
        orig_path = os.path.join(get_s3_storage_config().BASE_PHOTO_PATH, orig_key)
        preview_path = os.path.join(
            get_s3_storage_config().BASE_PHOTO_PATH, preview_key
        )

        try:
            os.makedirs(os.path.dirname(orig_path), exist_ok=True)
            logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {os.path.dirname(orig_path)}")
        except OSError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
            if e.errno == errno.EACCES:
                raise HTTPException(
                    status_code=500, detail="–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏."
                )
            raise HTTPException(
                status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."
            )

        try:
            with open(orig_path, "wb") as f:
                f.write(orig_file_bytes)
            logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {orig_path}")
        except FileNotFoundError as e:
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {e}")
            raise HTTPException(
                status_code=500, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞."
            )
        except PermissionError as e:
            logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {e}")
            raise HTTPException(
                status_code=500, detail="–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞."
            )
        except OSError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.")

        try:
            with open(preview_path, "wb") as f:
                f.write(preview_file_bytes)
            logger.info(f"–ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {preview_path}")
        except FileNotFoundError as e:
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é: {e}")
            raise HTTPException(
                status_code=500, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é."
            )
        except PermissionError as e:
            logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é: {e}")
            raise HTTPException(status_code=500, detail="–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é.")
        except OSError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–≤—å—é.")

        return orig_key, preview_key

    @classmethod
    async def delete_photo_file(cls, link: str, use_s3: bool = True):
        """
        üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (S3 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ).
        """
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {link}")
        try:
            if use_s3:
                await asyncio.to_thread(
                    cls().client.remove_object, cls().bucket_name, link
                )
                logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ S3")
            else:
                path = os.path.join(get_s3_storage_config().BASE_PHOTO_PATH, link)
                if os.path.exists(path):
                    os.remove(path)
                    logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
                else:
                    logger.warning("–§–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

    async def get_photo_file(
        self, date: str, identifier: UUID, filename: str
    ) -> StreamingResponse:
        """
        üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –æ—Ç–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ StreamingResponse.
        """
        key = f"{date}/{identifier}/{filename}"
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {key}")
        try:
            if self.use_s3:
                response = await asyncio.to_thread(
                    self.client.get_object, self.bucket_name, key
                )
                media_type, _ = mimetypes.guess_type(filename)
                return StreamingResponse(
                    response.stream(32 * 1024),
                    media_type=media_type or "application/octet-stream",
                )
            else:
                path = os.path.join(get_s3_storage_config().BASE_PHOTO_PATH, key)
                if not os.path.exists(path):
                    raise HTTPException(
                        status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ"
                    )
                return StreamingResponse(
                    open(path, "rb"),
                    media_type=mimetypes.guess_type(filename)[0]
                    or "application/octet-stream",
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
