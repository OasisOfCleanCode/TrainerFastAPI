from pathlib import Path
from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse, PlainTextResponse, HTMLResponse

info_router = APIRouter()

EXCLUDED_FILES = {
    "__init__.py",
    "__pycache__",
    ".env",
    ".dockerignore",
    ".gitignore",
    "venv",
    ".venv",
    "env",
    ".git",
    "node_modules",
    "web_app.egg-info",
    "TrainerAPI.egg-info",
    "build",
    "node_modules",
    "logs"
}
EXCLUDED_EXTENSIONS = {".pyc", ".pyo", ".pyd", ".db", ".log"}


def is_valid_file(path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    # –ò—Å–∫–ª—é—á–∞–µ–º –ª—é–±—ã–µ —á–∞—Å—Ç–∏ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã
    if any(part in EXCLUDED_FILES for part in path.parts):
        return False

    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤)
    if path.is_file() and path.suffix in EXCLUDED_EXTENSIONS:
        return False

    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã (–Ω–æ –Ω–µ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞!)
    if any(part.startswith(".") and part != BASE_PATH.name for part in path.parts):
        return False

    return True


def get_file_icon(ext: str, name: str) -> str:
    if name.lower() == "readme.md":
        return "üìò"
    if ext in {".py"}:
        return "üêç"
    if ext in {".js"}:
        return "üü®"
    if ext in {".css"}:
        return "üé®"
    if ext in {".html", ".htm", ".jinja"}:
        return "üß©"
    if ext in {".sh", ".ps1"}:
        return "üñ•Ô∏è"
    if ext in {".json", ".yaml", ".yml", ".toml"}:
        return "üßæ"
    if ext in {".md"}:
        return "üìò"
    if ext in {".txt"}:
        return "üìÑ"
    if ext in {".log"}:
        return "üìú"
    if ext in {".jpg", ".jpeg", ".png", ".webp", ".svg", ".gif"}:
        return "üñºÔ∏è"
    if ext in {".pdf"}:
        return "üìï"
    if ext in {".zip", ".tar", ".gz"}:
        return "üóúÔ∏è"
    if ext in {".sql"}:
        return "üóÑÔ∏è"
    return "üìÑ"

@info_router.get("/health")
async def health():
    """
    **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞**

    ```
    Endpoint: GET /health
    Response: {"status": "ok"}
    Status Codes:
      - 200: –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    ```

    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.
    –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 200 —Å JSON-–æ–±—ä–µ–∫—Ç–æ–º {"status": "ok"}.
    """
    return {"status": "ok"}


@info_router.get("/source/{path:path}", response_class=FileResponse)
async def get_source_file(path: str):
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π**

    ```
    Endpoint: GET /source/{path}

    Parameters:
      - path (str): –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É—Ç–∏.
                   –ü—Ä–∏–º–µ—Ä—ã:
                   - "README.md" - —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
                   - "src/main.py" - —Ñ–∞–π–ª –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                   - "docs/api/v1/spec.yaml" - –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    Response Types:
      - PlainTextResponse: –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (.py, .md, .txt, .html, .css, .js, .json)
                          —Å Content-Type: text/plain
      - FileResponse: –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ (–±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–¥.)

    Status Codes:
      - 200: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      - 400: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
      - 403: –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω (—Å–∫—Ä—ã—Ç—ã–µ/—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã)
      - 404: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

    Security:
      - –ó–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å —Ç–æ—á–∫–∏ (—Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã)
      - –ó–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º (.git, __pycache__ –∏ —Ç.–¥.)
      - –ó–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ (.pyc, .pyd –∏ —Ç.–¥.)

    Examples:
      1. –ü–æ–ª—É—á–µ–Ω–∏–µ README.md –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞:
         GET /source/README.md

      2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src:
         GET /source/src/main.py

      3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:
         GET /source/configs/production/database.yaml

      4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–µ—Ä–Ω–µ—Ç—Å—è –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª):
         GET /source/static/images/logo.png
    ```

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:
    1. –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞
    2. –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—É—é –≥–ª—É–±–∏–Ω—É –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    4. –ü—É—Ç—å –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    5. –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ UNIX-—Å–∏—Å—Ç–µ–º–∞—Ö

    """
    full_path = BASE_PATH / path

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not full_path.exists():
        raise HTTPException(status_code=404, detail="File not found")
    if not full_path.is_file():
        raise HTTPException(status_code=400, detail="Requested path is not a file")
    if not is_valid_file(full_path):
        raise HTTPException(status_code=403, detail="Access to this file is restricted")

    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    if full_path.suffix in {".py", ".md", ".txt", ".html", ".css", ".js", ".json"}:
        return PlainTextResponse(
            content=full_path.read_text(encoding="utf-8"), media_type="text/plain"
        )

    return FileResponse(full_path)


@info_router.get("/structure", response_class=PlainTextResponse)
async def get_project_structure():
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞**

    Endpoint: GET /structure
    Response: PlainTextResponse
    Format:
      üìÅ dir_name
          üìÑ file_name (size KB)
    Status Codes:
      - 200: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞.
    –î–ª—è —Ñ–∞–π–ª–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö. –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –≤—ã–≤–æ–¥–∞.
    """
    structure = [f"üìÅ {BASE_PATH.name}"]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

    def build_tree(directory: Path, prefix: str = ""):
        try:
            items = sorted(directory.iterdir(), key=lambda x: (x.is_dir(), x.name.lower()))
        except (PermissionError, OSError):
            return

        for item in items:
            if not is_valid_file(item):
                continue

            if item.is_dir():
                structure.append(f"{prefix}üìÅ {item.name}")
                build_tree(item, prefix + "    ")
            else:
                size_kb = item.stat().st_size / 1024
                icon = get_file_icon(item.suffix.lower(), item.name)
                structure.append(f"{prefix}{icon} {item.name} ({size_kb:.1f} KB)")

    build_tree(BASE_PATH)
    return "\n".join(structure)


@info_router.get("/structure/html", response_class=HTMLResponse)
async def get_clickable_structure():
    """
    **HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–∞–π–ª—ã**

    Endpoint: GET /structure/html
    Response: HTMLResponse
    –°—Ç–∏–ª—å: –¥–µ—Ä–µ–≤–æ –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º –≤–∏–¥–µ, –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (—Å—Å—ã–ª–∫–∏ –Ω–∞ /source/{path})
    """
    lines = [f"<div><strong>üìÅ {BASE_PATH.name}</strong></div>"]

    def build_tree(directory: Path, prefix: str = ""):
        try:
            items = sorted(directory.iterdir(), key=lambda x: (x.is_dir(), x.name.lower()))
        except (PermissionError, OSError):
            return

        for item in items:
            if not is_valid_file(item):
                continue

            rel_path = item.relative_to(BASE_PATH).as_posix()
            safe_href = f"/api/info/source/{rel_path}"

            if item.is_dir():
                lines.append(f"{prefix}üìÅ {item.name}<br>")
                build_tree(item, prefix + "&nbsp;&nbsp;&nbsp;&nbsp;")
            else:
                size_kb = item.stat().st_size / 1024
                icon = get_file_icon(item.suffix.lower(), item.name)
                lines.append(
                    f"{prefix}{icon} <a href='{safe_href}' target='_blank' style='color:#4fc3f7;text-decoration:none;'>{item.name}</a> "
                    f"<span style='color:gray'>({size_kb:.1f} KB)</span><br>"
                )

    build_tree(BASE_PATH)

    return f"""
    <html>
        <head>
            <title>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞</title>
            <style>
                body {{
                    background-color: #1e1e1e;
                    color: #ccc;
                    font-family: monospace;
                    padding: 20px;
                    white-space: pre-wrap;
                }}
                a:hover {{
                    text-decoration: underline;
                }}
            </style>
        </head>
        <body>
            {''.join(lines)}
        </body>
    </html>
    """

@info_router.get("/", response_class=PlainTextResponse)
async def get_file_list():
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤**

    Endpoint: GET /
    Response: PlainTextResponse
    Format:
      path/to/file1
      path/to/file2
    Status Codes:
      - 200: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏.
    –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –≤—ã–≤–æ–¥–∞.
    """
    file_list = []

    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
    for item in BASE_PATH.iterdir():
        if item.is_file() and is_valid_file(item):
            file_list.append(item.name)

    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    for item in BASE_PATH.rglob("*"):
        if not is_valid_file(item) or not item.is_file() or item.parent == BASE_PATH:
            continue

        relative_path = item.relative_to(BASE_PATH)
        file_list.append(str(relative_path))

    return "\n".join(sorted(file_list, key=lambda x: x.lower()))


@info_router.get("/README.md", response_class=FileResponse)
async def readme():
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ README.md –ø—Ä–æ–µ–∫—Ç–∞**

    ```
    Endpoint: GET /README.md
    Response: FileResponse
    Status Codes:
      - 200: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      - 404: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    ```

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ README-—Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 404.
    """
    full_path = BASE_PATH / "README.md"
    return FileResponse(full_path)


@info_router.get("/logo_readme.webp", response_class=FileResponse)
async def readme_logo():
    """
    **–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞**

    ```
    Endpoint: GET /logo_readme.webp
    Response: FileResponse
    Status Codes:
      - 200: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      - 404: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    ```

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WEBP.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 404.
    """
    full_path = BASE_PATH / "logo_readme.webp"
    return FileResponse(full_path)

