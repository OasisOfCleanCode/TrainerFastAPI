# deploy/compose.trainerapi.infrastructure.yml

services:
  tapi_pstgr:
    image: postgres:16.3-alpine
    container_name: tapi_pstgr
    environment:
      POSTGRES_DB: ${TAPI_PSTGR_NAME}
      POSTGRES_USER: ${TAPI_PSTGR_USER}
      POSTGRES_PASSWORD: ${TAPI_PSTGR_PASS}
    ports:
      - "${TAPI_PSTGR_PORT}:5432"
    volumes:
      - tapi_pstgr_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${TAPI_PSTGR_USER} -d ${TAPI_PSTGR_NAME} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      tapi_dev_network:
        ipv4_address: 172.18.0.103
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${TAPI_RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${TAPI_RABBITMQ_PASS}
    ports:
      - "${TAPI_RABBITMQ_PORT}:5672"
      - "${TAPI_RABBITMQ_UI_PORT}:15672"
    volumes:
      - tapi_rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      tapi_dev_network:
        ipv4_address: 172.18.0.203
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    command: redis-server --requirepass ${TAPI_REDIS_PASS}
    ports:
      - ":6379"
    volumes:
      - tapi_redis_data:/data
    networks:
      tapi_dev_network:
        ipv4_address: 172.18.0.201
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${TAPI_REDIS_PASS}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  tapi_pstgr_data:
  tapi_redis_data:
  tapi_rabbitmq_data:

networks:
  tapi_dev_network:
    external: true