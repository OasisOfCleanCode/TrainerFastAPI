// üìå auth.js ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Ç–æ–∫–µ–Ω—ã, –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è

let isRefreshing = false;
let refreshSubscribers = [];

function subscribeTokenRefresh(cb) {
  refreshSubscribers.push(cb);
}

function onTokenRefreshed(token) {
  refreshSubscribers.forEach(cb => cb(token));
  refreshSubscribers = [];
}

// üì§ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function login(username, password) {
  const data = new URLSearchParams();
  data.append("username", username);
  data.append("password", password);
  data.append("scope", "USER");

  const res = await fetch("/api/login", {
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body: data,
    credentials: "include"
  });

  if (!res.ok) {
    const error = await res.json();
    throw new Error(error.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
  }

  const result = await res.json();
  if (result.scope && result.scope !== "USER") {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
  }

  localStorage.setItem("access_token", result.access_token);
}

// üì§ –í—ã—Ö–æ–¥
async function logout() {
  await fetch("/api/logout", {
    method: "POST",
    credentials: "include"
  });

  localStorage.removeItem("access_token");
  window.location.href = "/";
}

// ‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
async function refreshToken() {
  const res = await fetch("/api/refresh", {
    method: "PUT",
    credentials: "include"
  });

  if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω");

  const data = await res.json();
  localStorage.setItem("access_token", data.access_token);
  return data.access_token;
}

// üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getCurrentUser() {
    let token = localStorage.getItem("access_token");

    let res = await fetch("/api/me", {
        method: "GET",
        headers: { Authorization: "Bearer " + token },
        credentials: "include"
    });

    if (res.status === 401) {
        try {
            token = await refreshToken();
            res = await fetch("/api/me", {
                method: "GET",
                headers: { Authorization: "Bearer " + token },
                credentials: "include"
            });
        } catch (e) {
            throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }
    }

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
    return await res.json();
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
async function refreshToken() {
    const res = await fetch("/api/refresh", {
        method: "PUT",
        credentials: "include"
    });

    if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω");

    const json = await res.json();
    localStorage.setItem("access_token", json.access_token);
    return json.access_token;
}
window.refreshToken = refreshToken;
window.getCurrentUser = getCurrentUser;
window.logout = logout;
window.login = login;