# app/app.py

import os
from pathlib import Path

import uvicorn
from contextlib import asynccontextmanager
from typing import AsyncGenerator

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.responses import RedirectResponse

from app.core.config import BASE_PATH
from version import get_app_version
from app.core.templates import templates
from app.fast_api.v1.endpoints import site as web_routes
from app.fast_api.v1.endpoints import info as info_routers

from app.utils.logger import logger
from app.core.error_handlers import setup_exception_handlers
from app.core.middlewares import (
    LogRouteMiddleware,
    DynamicCORSMiddleware,
    StaticVersionMiddleware,
)
from app.db.dao.user import UsersDAO


def load_md_description(filename: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .md —Ñ–∞–π–ª–∞ –∏–∑ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å"""
    file_path = BASE_PATH / 'descriptions' / filename
    return file_path.read_text(encoding="utf-8")


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator:
    """Lifespan –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    setup_exception_handlers(app)
    await configure_routers()
    await UsersDAO.check_roles_in_db()
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
    yield
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")


# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ—Ä–æ–Ω—Ç –∏ –±—ç–∫)
app_main = FastAPI(
    lifespan=lifespan,
    title="Trainer API Application ‚Äî part of the Oasis of Clean Code project",
    description=load_md_description("TrainerAPI.md"),
    swagger_ui_parameters={"persistAuthorization": True},
    swagger_ui_init_oauth={
        "clientId": "swagger-client",
        "appName": "Swagger UI TrainerAPI",
        "scopes": "USER",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        "usePkceWithAuthorizationCodeGrant": True,
    },
    openapi_url="/api/openapi.json",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
)

app_info = FastAPI(
    lifespan=lifespan,
    title="üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ BeaHea",
    description=load_md_description("description_info_api.md"),
    root_path="/api/info",  # –ö–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –∫–æ –≤—Å–µ–º URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –∑–∞ –ø—Ä–æ–∫—Å–∏).
    swagger_ui_parameters={"persistAuthorization": True},
    openapi_url="/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
)

app = FastAPI(
    lifespan=lifespan,
    redirect_slashes=False,
    version=get_app_version(),
    contact=dict(name="", email="", telegram="@d_m_elec"),
)

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ======
# app.add_middleware(FingerPrintMiddleware)
app.add_middleware(LogRouteMiddleware)
app.add_middleware(DynamicCORSMiddleware)
app.add_middleware(StaticVersionMiddleware, templates=templates)


app_info.add_middleware(LogRouteMiddleware)
app_info.add_middleware(DynamicCORSMiddleware)
app_info.add_middleware(StaticVersionMiddleware, templates=templates)



# –†–µ–¥–∏—Ä–µ–∫—Ç—ã –Ω–∞ Swagger –∏ ReDoc
@app.get("/docs", include_in_schema=False)
async def redirect_docs():
    return RedirectResponse(url="/api/docs")


@app.get("/redoc", include_in_schema=False)
async def redirect_redoc():
    return RedirectResponse(url="/api/redoc")


@app.get("/api", include_in_schema=False)
async def redirect_api():
    return RedirectResponse(url="/api/docs")



app.mount("/api/info", app_info)

static_dir = Path(__file__).parent / "app" / "static"
app.mount(
    "/static",
    StaticFiles(directory=static_dir),
    name="static"
)

# –î–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
logs_dir = Path(__file__).parent / "logs"
app.mount(
    "/logs",
    StaticFiles(directory=logs_dir),
    name="logs"
)

app.mount("/", app_main)




# ====== –ó–∞—â–∏—Ç–∞ API ======
# protected_swagger = ProtectedSwagger()
#
#
# @app.middleware("http")
# async def swagger_auth_middleware(request: Request, call_next):
#     if request.url.path.startswith('/api'):
#         return await protected_swagger.process_request(request, call_next)
#     return await call_next(request)





# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ ======


async def configure_routers():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö API —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Ä–æ—É—Ç–µ—Ä–æ–≤...")

    # API —Ä–æ—É—Ç–µ—Ä—ã
    auth_api = AuthAPI()
    security_api = SecurityAPI()
    profile_api = ProfileAPI()
    user_api = UserAPI()
    admin_api = AdminAPI()
    background_api = BackgroundAPI()

    await auth_api.initialize_routes()
    await security_api.initialize_routes()
    await profile_api.initialize_routes()
    await user_api.initialize_routes()
    await admin_api.initialize_routes()
    await background_api.initialize_routes()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api
    app_main.include_router(auth_api.router, prefix="/api")
    app_main.include_router(security_api.router, prefix="/api")
    app_main.include_router(profile_api.router, prefix="/api")
    app_main.include_router(user_api.router, prefix="/api")
    app_main.include_router(admin_api.router, prefix="/api")
    app_main.include_router(background_api.router, prefix="/api")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ API —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api
    app_info.include_router(info_routers.info_router, tags=["Information"])

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–µ–±-—Ä–æ—É—Ç–µ—Ä—ã
    app_main.include_router(web_routes.web_router, tags=["Web"])

    logger.info("–í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


if __name__ == "__main__":
    uvicorn.run(
        "run:app",
        host="0.0.0.0",
        port=8666,
        reload=True,
        proxy_headers=True,
        factory=False,  # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é app
    )
